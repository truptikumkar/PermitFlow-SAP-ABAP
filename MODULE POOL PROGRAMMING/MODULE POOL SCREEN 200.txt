*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_0200  INPUT
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.
TABLES:  MAKT .
DATA:
      M_DES TYPE MAKT-MAKTX,
      wa_table TYPE ZTABLE_REQ,
     wa_tb TYPE STANDARD TABLE OF ZTABLE_REQ WITH HEADER LINE ,
*      wa_tb TYPE TABLE OF ZTY_REQ_TABLE,
*      lv TYPE ZTY_REQ_TABLE,
      lv_fm TYPE rs38l_fnam.

CASE SY-UCOMM.
  WHEN &#39;BACK&#39;.
    CALL SCREEN 0100.
       WHEN &#39;PRINT&#39;.
         show = &#39;X&#39;.
         IF R_NO IS INITIAL.
           MESSAGE : &#39;ENTER A REQUEST NUMBER TO PRINT ITS DETAILS WHICH IS NO
T PROCESSED YET.&#39;  TYPE &#39;E&#39; .
           ELSE .
*             SELECT * FROM ZTABLE_REQ INTO TABLE @lv WHERE REQ_NO = @R_NO AN
D FLAG_BIT = &#39;&#39;.
*               APPEND lv TO wa_tb.
             SELECT SINGLE * FROM ZTABLE_REQ INTO  wa_tb WHERE REQ_NO = R_NO 
AND FLAG_BIT = &#39;&#39;.

               IF wa_tb IS INITIAL .
                 MESSAGE : &#39;REQUEST NUMBER YOU HAVE ENTERED DOES NOT EXIST OR
 HAS BEEN PROCESSED FURTHER&#39; TYPE &#39;E&#39;.
                 ELSE .
*              ----------------code to call smart form------------
                   CALL FUNCTION &#39;SSF_FUNCTION_MODULE_NAME &#39;
                   EXPORTING
                     formname = &#39;ZFIRST_SF&#39;
                   IMPORTING
                     fm_name = lv_fm.
                   CALL FUNCTION lv_fm
                   EXPORTING
*                     wa_tb = wa_tb.
                      R_NO = R_NO.
                   IF sy-subrc &lt;&gt; 0.
                     MESSAGE :&#39; ERROR WHILE PRINTING&#39; TYPE &#39;E&#39;.
                     ELSE .
                       MESSAGE :&#39;PRINTED SUCESSFULL&#39; TYPE &#39;S&#39;.
                   ENDIF.
*
*                   ------------------end--------------
*                   -------code to call adobe form--------------
*
*                   DATA : lv_fm_name TYPE rs38l_fnam,
*                         ls_output TYPE sfpoutputparams,
*                         lv_res TYPE sfpdocparams.
*
*                   CALL FUNCTION &#39;FP_FUNCTION_MODULE_NAME&#39;
*                      EXPORTING
*                        i_name = &#39;ZFIRST_AF&#39;

*                      IMPORTING
*                        e_funcname = lv_fm_name.
*
*                   ls_output-nodialog = abap_true.
*                   ls_output-nodialog = abap_true.
*
*                   CALL FUNCTION &#39;FP_JOB_OPEN&#39;
*                   CHANGING
*                     ie_outputparams = ls_output.
*
*                   CALL FUNCTION lv_fm_name
*                     EXPORTING
*                       /1bcdwb/docparams = ls_output
*                       RE_NO = R_NO
*
*                      IMPORTING
*                        /1bcdwb/formoutput = lv_res.
*
*                   CALL FUNCTION &#39;FP_JOB_CLOSE&#39;.
*
*                   IF  sy-subrc = 0.
*                     MESSAGE : &#39;PRINT SUCESSFULL&#39; TYPE &#39;S&#39;.
*                     ELSE .
*                       MESSAGE : &#39;PRINT FAILED&#39; TYPE &#39;E&#39;.
*
*                   ENDIF.
*                   ----------end-----------------------------
               ENDIF.
         ENDIF.
  WHEN &#39;SUBMIT&#39;  OR &#39; &#39;.
    SELECT SINGLE  MAKTX FROM MAKT INTO (@M_DES) WHERE MATNR = @MAT AND spras
 = @sy-langu .
      IF M_DES  IS  INITIAL.
        MESSAGE : &#39;MATERIAL DOES NOT EXIST&#39; TYPE &#39;E&#39;.
        ELSEIF QUAN IS  INITIAL OR  QUAN &lt; 1  .
          MESSAGE : &#39;ENTER QUANTITY GREATER THEN 0 &#39; TYPE &#39;E&#39;.
          ELSEIF PLA IS  INITIAL .
            MESSAGE : &#39;ENTER VALID PLANT NUMBER &#39; TYPE &#39;E&#39;.
            ELSE.
     CALL FUNCTION &#39;NUMBER_GET_NEXT&#39;
         EXPORTING
           nr_range_nr = &#39;01&#39;
           object      = &#39;ZGET_NO&#39;
         IMPORTING
           number      = R_NO.

     wa_table-REQ_NO = R_NO.
     wa_table-POS_DATE = SY-DATUM .
     wa_table-POS_TIME = SY-UZEIT.
     wa_table-PLANT = PLA.
     wa_table-MATERIAL = MAT.
     wa_table-MAT_DES = M_DES.
     wa_table-QUANTITY = QUAN.

    SELECT SINGLE LABST FROM MARD INTO wa_table-
STOCK WHERE MATNR = MAT AND WERKS = PLA AND LGORT = &#39;1120&#39; .
    SELECT SINGLE VERPR FROM MBEW INTO wa_table-
VALUE WHERE MATNR = MAT AND BWKEY = PLA.

     INSERT ZTABLE_REQ FROM wa_table.
     IF SY-SUBRC = 0 .
       MESSAGE : |REQUEST SENT SUCESSFULLY Request number = { R_NO } | TYPE &#39;
S&#39;.
       ELSE.
         MESSAGE : &#39;ERROR SENDING REQUEST&#39; TYPE &#39;S&#39;.
     ENDIF.
      ENDIF.
ENDCASE.
ENDMODULE.
***&amp;SPWIZARD: DATA DECLARATION FOR TABLECONTROL &#39;ZTEST12&#39;
*&amp;SPWIZARD: DEFINITION OF DDIC-TABLE
TABLES:   ZTABLE_ISSUE.
*&amp;SPWIZARD: TYPE FOR THE DATA OF TABLECONTROL &#39;ZTEST12&#39;
TYPES: BEGIN OF T_ZTEST12,
         MATERIAL LIKE ZTABLE_ISSUE-MATERIAL,
         MATERIAL_DESCRIPTION LIKE ZTABLE_ISSUE-MATERIAL_DESCRIPTION,
         QUANTITY LIKE ZTABLE_ISSUE-QUANTITY,
         STOCK LIKE ZTABLE_ISSUE-STOCK,
       END OF T_ZTEST12.
*&amp;SPWIZARD: INTERNAL TABLE FOR TABLECONTROL &#39;ZTEST12&#39;
DATA:     G_ZTEST12_ITAB   TYPE T_ZTEST12 OCCURS 0,
          G_ZTEST12_WA     TYPE T_ZTEST12. &quot;work area
DATA:     G_ZTEST12_COPIED.           &quot;copy flag
*&amp;SPWIZARD: DECLARATION OF TABLECONTROL &#39;ZTEST12&#39; ITSELF
CONTROLS: ZTEST12 TYPE TABLEVIEW USING SCREEN 0400.
*&amp;SPWIZARD: LINES OF TABLECONTROL &#39;ZTEST12&#39;
DATA:     G_ZTEST12_LINES  LIKE SY-LOOPC.
*&amp;SPWIZARD: OUTPUT MODULE FOR TC &#39;ZTEST12&#39;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: COPY DDIC-TABLE TO ITAB

MODULE ZTEST12_INIT OUTPUT.
  IF G_ZTEST12_COPIED IS INITIAL.
*&amp;SPWIZARD: COPY DDIC-TABLE &#39;ZTABLE_ISSUE&#39;
*&amp;SPWIZARD: INTO INTERNAL TABLE &#39;g_ZTEST12_itab&#39;
    SELECT * FROM ZTABLE_ISSUE
       INTO CORRESPONDING FIELDS
       OF TABLE G_ZTEST12_ITAB.
    G_ZTEST12_COPIED = &#39;X&#39;.
    REFRESH CONTROL &#39;ZTEST12&#39; FROM SCREEN &#39;0400&#39;.
  ENDIF.
ENDMODULE.
*&amp;SPWIZARD: OUTPUT MODULE FOR TC &#39;ZTEST12&#39;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: MOVE ITAB TO DYNPRO
MODULE ZTEST12_MOVE OUTPUT.
  MOVE-CORRESPONDING G_ZTEST12_WA TO ZTABLE_ISSUE.
ENDMODULE.
*&amp;SPWIZARD: OUTPUT MODULE FOR TC &#39;ZTEST12&#39;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: GET LINES OF TABLECONTROL
MODULE ZTEST12_GET_LINES OUTPUT.
  G_ZTEST12_LINES = SY-LOOPC.
ENDMODULE.
*&amp;SPWIZARD: INPUT MODULE FOR TC &#39;ZTEST12&#39;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: MODIFY TABLE
MODULE ZTEST12_MODIFY INPUT.
  MOVE-CORRESPONDING ZTABLE_ISSUE TO G_ZTEST12_WA.
  MODIFY G_ZTEST12_ITAB
    FROM G_ZTEST12_WA
    INDEX ZTEST12-CURRENT_LINE.
ENDMODULE.
*&amp;SPWIZARD: INPUT MODULE FOR TC &#39;ZTEST12&#39;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: PROCESS USER COMMAND
MODULE ZTEST12_USER_COMMAND INPUT.
  OK_CODE = SY-UCOMM.
  PERFORM USER_OK_TC USING    &#39;ZTEST12&#39;
                              &#39;G_ZTEST12_ITAB&#39;
                              &#39;FLAG&#39;
                     CHANGING OK_CODE.
  SY-UCOMM = OK_CODE.
ENDMODULE.
*&amp;SPWIZARD: TYPE FOR THE DATA OF TABLECONTROL &#39;ZTEST13&#39;
TYPES: BEGIN OF T_ZTEST13,
         MATERIAL LIKE ZTABLE_ISSUE-MATERIAL,
         MATERIAL_DESCRIPTION LIKE ZTABLE_ISSUE-MATERIAL_DESCRIPTION,
         QUANTITY LIKE ZTABLE_ISSUE-QUANTITY,
         STOCK LIKE ZTABLE_ISSUE-STOCK,
         FLAG_BIT LIKE ZTABLE_ISSUE-FLAG_BIT,
       END OF T_ZTEST13.

*&amp;SPWIZARD: INTERNAL TABLE FOR TABLECONTROL &#39;ZTEST13&#39;
DATA:     G_ZTEST13_ITAB   TYPE T_ZTEST13 OCCURS 0,
          G_ZTEST13_WA     TYPE T_ZTEST13. &quot;work area
DATA:     G_ZTEST13_COPIED.           &quot;copy flag
*&amp;SPWIZARD: DECLARATION OF TABLECONTROL &#39;ZTEST13&#39; ITSELF
CONTROLS: ZTEST13 TYPE TABLEVIEW USING SCREEN 0400.
*&amp;SPWIZARD: LINES OF TABLECONTROL &#39;ZTEST13&#39;
DATA:     G_ZTEST13_LINES  LIKE SY-LOOPC.
*&amp;SPWIZARD: OUTPUT MODULE FOR TC &#39;ZTEST13&#39;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: COPY DDIC-TABLE TO ITAB
MODULE ZTEST13_INIT OUTPUT.
  IF G_ZTEST13_COPIED IS INITIAL.
*&amp;SPWIZARD: COPY DDIC-TABLE &#39;ZTABLE_ISSUE&#39;
*&amp;SPWIZARD: INTO INTERNAL TABLE &#39;g_ZTEST13_itab&#39;
    SELECT * FROM ZTABLE_ISSUE
       INTO CORRESPONDING FIELDS
       OF TABLE G_ZTEST13_ITAB.
    G_ZTEST13_COPIED = &#39;X&#39;.
    REFRESH CONTROL &#39;ZTEST13&#39; FROM SCREEN &#39;0400&#39;.
  ENDIF.
ENDMODULE.
*&amp;SPWIZARD: OUTPUT MODULE FOR TC &#39;ZTEST13&#39;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: MOVE ITAB TO DYNPRO
MODULE ZTEST13_MOVE OUTPUT.
  MOVE-CORRESPONDING G_ZTEST13_WA TO ZTABLE_ISSUE.
ENDMODULE.
*&amp;SPWIZARD: OUTPUT MODULE FOR TC &#39;ZTEST13&#39;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: GET LINES OF TABLECONTROL
MODULE ZTEST13_GET_LINES OUTPUT.
  G_ZTEST13_LINES = SY-LOOPC.
ENDMODULE.
*&amp;SPWIZARD: INPUT MODULE FOR TC &#39;ZTEST13&#39;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: PROCESS USER COMMAND
MODULE ZTEST13_USER_COMMAND INPUT.
  OK_CODE = SY-UCOMM.
  PERFORM USER_OK_TC USING    &#39;ZTEST13&#39;
                              &#39;G_ZTEST13_ITAB&#39;
                              &#39;FLAG&#39;
                     CHANGING OK_CODE.
  SY-UCOMM = OK_CODE.
ENDMODULE.
*&amp;SPWIZARD: TYPE FOR THE DATA OF TABLECONTROL &#39;ZTEST14&#39;
TYPES: BEGIN OF T_ZTEST14,
         MATERIAL LIKE ZTABLE_ISSUE-MATERIAL,
         MATERIAL_DESCRIPTION LIKE ZTABLE_ISSUE-MATERIAL_DESCRIPTION,
         QUANTITY LIKE ZTABLE_ISSUE-QUANTITY,

         STOCK LIKE ZTABLE_ISSUE-STOCK,
         FLAG_BIT LIKE ZTABLE_ISSUE-FLAG_BIT,
       END OF T_ZTEST14.
*&amp;SPWIZARD: INTERNAL TABLE FOR TABLECONTROL &#39;ZTEST14&#39;
DATA:     G_ZTEST14_ITAB   TYPE T_ZTEST14 OCCURS 0,
          G_ZTEST14_WA     TYPE T_ZTEST14. &quot;work area
DATA:     G_ZTEST14_COPIED.           &quot;copy flag
*&amp;SPWIZARD: DECLARATION OF TABLECONTROL &#39;ZTEST14&#39; ITSELF
CONTROLS: ZTEST14 TYPE TABLEVIEW USING SCREEN 0400.
*&amp;SPWIZARD: LINES OF TABLECONTROL &#39;ZTEST14&#39;
DATA:     G_ZTEST14_LINES  LIKE SY-LOOPC.
*&amp;SPWIZARD: OUTPUT MODULE FOR TC &#39;ZTEST14&#39;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: COPY DDIC-TABLE TO ITAB
MODULE ZTEST14_INIT OUTPUT.
  IF G_ZTEST14_COPIED IS INITIAL.
*&amp;SPWIZARD: COPY DDIC-TABLE &#39;ZTABLE_ISSUE&#39;
*&amp;SPWIZARD: INTO INTERNAL TABLE &#39;g_ZTEST14_itab&#39;
    SELECT * FROM ZTABLE_ISSUE
       INTO CORRESPONDING FIELDS
       OF TABLE G_ZTEST14_ITAB.
    G_ZTEST14_COPIED = &#39;X&#39;.
    REFRESH CONTROL &#39;ZTEST14&#39; FROM SCREEN &#39;0400&#39;.
  ENDIF.
ENDMODULE.
*&amp;SPWIZARD: OUTPUT MODULE FOR TC &#39;ZTEST14&#39;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: MOVE ITAB TO DYNPRO
MODULE ZTEST14_MOVE OUTPUT.
  MOVE-CORRESPONDING G_ZTEST14_WA TO ZTABLE_ISSUE.
ENDMODULE.
*&amp;SPWIZARD: OUTPUT MODULE FOR TC &#39;ZTEST14&#39;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: GET LINES OF TABLECONTROL
MODULE ZTEST14_GET_LINES OUTPUT.
  G_ZTEST14_LINES = SY-LOOPC.
ENDMODULE.
*&amp;SPWIZARD: INPUT MODULE FOR TC &#39;ZTEST14&#39;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: MODIFY TABLE
MODULE ZTEST14_MODIFY INPUT.
  MOVE-CORRESPONDING ZTABLE_ISSUE TO G_ZTEST14_WA.
  MODIFY G_ZTEST14_ITAB
    FROM G_ZTEST14_WA
    INDEX ZTEST14-CURRENT_LINE.
ENDMODULE.
*&amp;SPWIZARD: INPUT MODULE FOR TC &#39;ZTEST14&#39;. DO NOT CHANGE THIS LINE!
*&amp;SPWIZARD: PROCESS USER COMMAND
MODULE ZTEST14_USER_COMMAND INPUT.

  OK_CODE = SY-UCOMM.
  PERFORM USER_OK_TC USING    &#39;ZTEST14&#39;
                              &#39;G_ZTEST14_ITAB&#39;
                              &#39;FLAG&#39;
                     CHANGING OK_CODE.
  SY-UCOMM = OK_CODE.
ENDMODULE.